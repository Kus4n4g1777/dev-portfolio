services:
  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    ports:
      - "8080:80"
      - "443:443"
    volumes:
      # Correct volume mount for your nginx configuration
      - ./nginx/conf.d/:/etc/nginx/conf.d/
    networks:
      - portfolio_net
    depends_on:
      dashboard_frontend:
        condition: service_started
      dashboard_backend:
        condition: service_started

  dashboard_frontend:
    build:
      context: ./apps/dashboard-admin/frontend
    container_name: dashboard_frontend
    ports:
      - "3000:3000"
    volumes:
      - ./apps/dashboard-admin/frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      # Point to the backend service name within the Docker network
      - FASTAPI_BACKEND_URL=http://dashboard_backend:8000
    networks:
      - portfolio_net
    depends_on:
      dashboard_backend:
        condition: service_started

  dashboard_backend:
    build: ./apps/dashboard-admin/backend/
    container_name: dashboard_backend
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - ./apps/dashboard-admin/backend/:/app
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./.env
    # No 'command' or 'entrypoint' needed here. The CMD from your Dockerfile
    # already points to your correct run.sh script.
    networks:
      - portfolio_net

  db:
    image: postgres:16-alpine
    container_name: dashboard_db
    restart: always
    env_file:
      - ./.env
    volumes:
      - portfolio_db:/var/lib/postgresql/data
    networks:
      - portfolio_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  portfolio_net:
    driver: bridge

volumes:
  portfolio_db:
    driver: local

