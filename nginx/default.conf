# Define an upostream block for my backend service
# 'backend' is the service name defined in my docker-compose.yml
# '3001' is the port my NestJS backend listens on inside its container
upstream backend_service {
	server backend:3001;
}

# Define an upstream block for my frontend service
# 'frontend' is the service name defined in my docker-compose.yml
# '4200' is the port my Angular frontend will listen on inside its container
# (We'll configure Angular later, but it's good to have this placeholder)
upstream frontend_service {
	server frontend:4200;
}

# Main server block for handling HTTP requests
server {
	# Nginx will listen on port 80 for incoming HTTP traffic
	listen 80;

	# Optional: Define my server name (e.g., localhost, mydomain.com)
	server_name localhost;

	# Location block for API requests
	# Any request starting with /api/ will be forwarded to the backend_service 
	location /api/ {
		# Proxy the request to the backend service
		proxy_pass http://backend_service/;
		# Set standard proxy headers to pass client information to the backend
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
       	        proxy_set_header X-Forwarded-Proto $scheme;
         }

   	 # Location block for all other requests (which will be handled by the frontend)
   	 # This will serve the static files of my Angular application once built
   	 # For now, during development, it will proxy to the Angular dev server
   	 location / {
       		 proxy_pass http://frontend_service/;
       		 # Set standard proxy headers
       		 proxy_set_header Host $host;
       		 proxy_set_header X-Real-IP $remote_addr;
       		 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
       		 proxy_set_header X-Forwarded-Proto $scheme;
   	 }

   	 # Optional: Error pages
   	 error_page 500 502 503 504 /50x.html;
   	 location = /50x.html {
       		 root /usr/share/nginx/html; # Default Nginx error page location
   	 }
}	
